/*
 * This file is generated by jOOQ.
 */
package ru.home.db.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.home.db.Indexes;
import ru.home.db.Keys;
import ru.home.db.Public;
import ru.home.db.tables.records.PresentRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2",
        "schema version:PUBLIC_1.5.0"
    },
    date = "2018-10-16T00:20:10.442Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Present extends TableImpl<PresentRecord> {

    private static final long serialVersionUID = 620982350;

    /**
     * The reference instance of <code>PUBLIC.present</code>
     */
    public static final Present PRESENT = new Present();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PresentRecord> getRecordType() {
        return PresentRecord.class;
    }

    /**
     * The column <code>PUBLIC.present.id</code>.
     */
    public final TableField<PresentRecord, UUID> ID = createField("id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.present.name</code>.
     */
    public final TableField<PresentRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.present.price</code>.
     */
    public final TableField<PresentRecord, BigDecimal> PRICE = createField("price", org.jooq.impl.SQLDataType.DECIMAL(8, 2).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.present.date</code>.
     */
    public final TableField<PresentRecord, LocalDateTime> DATE = createField("date", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.present</code> table reference
     */
    public Present() {
        this(DSL.name("present"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.present</code> table reference
     */
    public Present(String alias) {
        this(DSL.name(alias), PRESENT);
    }

    /**
     * Create an aliased <code>PUBLIC.present</code> table reference
     */
    public Present(Name alias) {
        this(alias, PRESENT);
    }

    private Present(Name alias, Table<PresentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Present(Name alias, Table<PresentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Present(Table<O> child, ForeignKey<O, PresentRecord> key) {
        super(child, key, PRESENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_E);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PresentRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_E;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PresentRecord>> getKeys() {
        return Arrays.<UniqueKey<PresentRecord>>asList(Keys.CONSTRAINT_E);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Present as(String alias) {
        return new Present(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Present as(Name alias) {
        return new Present(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Present rename(String name) {
        return new Present(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Present rename(Name name) {
        return new Present(name, null);
    }
}
