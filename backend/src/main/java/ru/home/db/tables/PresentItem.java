/*
 * This file is generated by jOOQ.
*/
package ru.home.db.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.home.db.Indexes;
import ru.home.db.Keys;
import ru.home.db.Presents;
import ru.home.db.tables.records.PresentItemRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5",
        "schema version:1"
    },
    date = "2018-02-23T09:15:27.173Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PresentItem extends TableImpl<PresentItemRecord> {

    private static final long serialVersionUID = 1535908304;

    /**
     * The reference instance of <code>presents.present_item</code>
     */
    public static final PresentItem PRESENT_ITEM = new PresentItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PresentItemRecord> getRecordType() {
        return PresentItemRecord.class;
    }

    /**
     * The column <code>presents.present_item.present_id</code>.
     */
    public final TableField<PresentItemRecord, UUID> PRESENT_ID = createField("present_id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>presents.present_item.candy_id</code>.
     */
    public final TableField<PresentItemRecord, UUID> CANDY_ID = createField("candy_id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>presents.present_item.count</code>.
     */
    public final TableField<PresentItemRecord, Integer> COUNT = createField("count", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>presents.present_item</code> table reference
     */
    public PresentItem() {
        this(DSL.name("present_item"), null);
    }

    /**
     * Create an aliased <code>presents.present_item</code> table reference
     */
    public PresentItem(String alias) {
        this(DSL.name(alias), PRESENT_ITEM);
    }

    /**
     * Create an aliased <code>presents.present_item</code> table reference
     */
    public PresentItem(Name alias) {
        this(alias, PRESENT_ITEM);
    }

    private PresentItem(Name alias, Table<PresentItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private PresentItem(Name alias, Table<PresentItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Presents.PRESENTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRESENT_ITEM_CANDY_ID, Indexes.PRESENT_ITEM_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PresentItemRecord> getPrimaryKey() {
        return Keys.KEY_PRESENT_ITEM_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PresentItemRecord>> getKeys() {
        return Arrays.<UniqueKey<PresentItemRecord>>asList(Keys.KEY_PRESENT_ITEM_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PresentItemRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PresentItemRecord, ?>>asList(Keys.PRESENT_ITEM_IBFK_1, Keys.PRESENT_ITEM_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PresentItem as(String alias) {
        return new PresentItem(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PresentItem as(Name alias) {
        return new PresentItem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PresentItem rename(String name) {
        return new PresentItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PresentItem rename(Name name) {
        return new PresentItem(name, null);
    }
}
