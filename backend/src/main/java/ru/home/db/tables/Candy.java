/*
 * This file is generated by jOOQ.
*/
package ru.home.db.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.home.db.Indexes;
import ru.home.db.Keys;
import ru.home.db.Public;
import ru.home.db.tables.records.CandyRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5",
        "schema version:PUBLIC_1.5.0"
    },
    date = "2018-10-14T18:23:22.262Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Candy extends TableImpl<CandyRecord> {

    private static final long serialVersionUID = -1892071151;

    /**
     * The reference instance of <code>PUBLIC.candy</code>
     */
    public static final Candy CANDY = new Candy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CandyRecord> getRecordType() {
        return CandyRecord.class;
    }

    /**
     * The column <code>PUBLIC.candy.id</code>.
     */
    public final TableField<CandyRecord, UUID> ID = createField("id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.candy.active</code>.
     */
    public final TableField<CandyRecord, Boolean> ACTIVE = createField("active", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("TRUE", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>PUBLIC.candy.name</code>.
     */
    public final TableField<CandyRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.candy.firm</code>.
     */
    public final TableField<CandyRecord, String> FIRM = createField("firm", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>PUBLIC.candy.price</code>.
     */
    public final TableField<CandyRecord, BigDecimal> PRICE = createField("price", org.jooq.impl.SQLDataType.DECIMAL(7, 2).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.candy.order</code>.
     */
    public final TableField<CandyRecord, Double> ORDER = createField("order", org.jooq.impl.SQLDataType.DOUBLE.nullable(false).defaultValue(org.jooq.impl.DSL.field("'1.1'", org.jooq.impl.SQLDataType.DOUBLE)), this, "");

    /**
     * Create a <code>PUBLIC.candy</code> table reference
     */
    public Candy() {
        this(DSL.name("candy"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.candy</code> table reference
     */
    public Candy(String alias) {
        this(DSL.name(alias), CANDY);
    }

    /**
     * Create an aliased <code>PUBLIC.candy</code> table reference
     */
    public Candy(Name alias) {
        this(alias, CANDY);
    }

    private Candy(Name alias, Table<CandyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Candy(Name alias, Table<CandyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_5, Indexes.LIST);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CandyRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_5;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CandyRecord>> getKeys() {
        return Arrays.<UniqueKey<CandyRecord>>asList(Keys.CONSTRAINT_5);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Candy as(String alias) {
        return new Candy(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Candy as(Name alias) {
        return new Candy(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Candy rename(String name) {
        return new Candy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Candy rename(Name name) {
        return new Candy(name, null);
    }
}
