plugins {
    id 'java'
    id 'org.springframework.boot' version '2.1.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'com.google.cloud.tools.jib' version '1.3.0'
    id 'nu.studer.jooq' version '3.0.3'
    id 'org.flywaydb.flyway' version '5.2.4'
    id 'com.github.ben-manes.versions' version '0.21.0'
}

group = 'ru.home.shop'
version = '1.5.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    jcenter()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.h2database:h2'
    implementation 'org.flywaydb:flyway-core'
    implementation 'com.fasterxml.uuid:java-uuid-generator:3.2.0'
    implementation 'fr.opensagres.xdocreport:fr.opensagres.xdocreport.document.docx:2.0.2'
    implementation 'fr.opensagres.xdocreport:fr.opensagres.xdocreport.template.freemarker:2.0.2'

    implementation 'org.mapstruct:mapstruct-jdk8:1.3.0.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.0.Final'

    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'

    testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
        exclude(module: 'junit')
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'net.ttddyy:datasource-proxy:1.5.1'
    testImplementation(group: 'com.github.database-rider', name: 'rider-spring', version: '1.2.7') {
        exclude(module: 'junit')
        exclude(module: 'slf4j-simple')
    }

    jooqRuntime 'com.h2database:h2'
}

compileJava {
    options.compilerArgs = [
            '-Xlint:all',
            '-Amapstruct.defaultComponentModel=spring',
            '-Amapstruct.unmappedTargetPolicy=ERROR'
    ]
}

test {
    useJUnitPlatform()
}

jib {
    to {
        image = "ir2sora/${project.name}"
        tags = [project.version]
    }
    container {
        ports = ['8080']
    }
}

def jooqDbUrl = "jdbc:h2:file:$projectDir/build/db-jooq/presents;AUTO_SERVER=TRUE"

flyway {
    url = jooqDbUrl
}

jooq {
    presents(sourceSets.main) {
        jdbc {
            url = jooqDbUrl
        }
        generator {
            generate {
                javaTimeTypes = true
            }
            database {
                inputSchema = 'PUBLIC'
                schemaVersionProvider = """
                    SELECT :schema_name || '_' || MAX("version") FROM "flyway_schema_history"
                """
            }
            target {
                packageName = 'ru.home.db'
                directory = 'src/main/java'
            }
        }
    }
}

generatePresentsJooqSchemaSource.dependsOn flywayMigrate
compileJava.dependsOn.remove('generatePresentsJooqSchemaSource')
